-- QUESTIONS

-- 1. How many transactions were completed during each marketing campaign?
-- 2. Which product had the highest sales quantity?
-- 3. What is the total revenue generated from each marketing campaign?
-- 4. What is the top-selling product category based on the total revenue generated?
-- 5. Which products had a higher quantity sold compared to the average quantity sold?
-- 6. What is the average revenue generated per day during the marketing campaigns?
-- 7. What is the percentage contribution of each product to the total revenue?
-- 8. Compare the average quantity sold during marketing campaigns to outside the marketing campaigns
-- 9. Compare the revenue generated by products inside the marketing campaigns to outside the campaigns
-- 10. Rank the products by their average daily quantity sold


-- 1. How many transactions were completed during each marketing campaign?
SELECT mc.campaign_name, COUNT(tr.transaction_id) AS number_of_transaction
FROM marketing_campaigns mc
JOIN transactions tr USING(product_id)
WHERE tr.purchase_date BETWEEN mc.start_date AND mc.end_date
GROUP BY mc.campaign_name;

-- 2. Which product had the highest sales quantity?
SELECT sc.product_name, SUM(t.quantity) AS highest_sales_quantity
FROM transactions t
JOIN sustainable_clothing sc USING(product_id)
GROUP BY sc.product_name
ORDER BY highest_sales_quantity DESC
LIMIT 1;

-- 3. What is the total revenue generated from each marketing campaign?
WITH Revenue_by_each_campaign AS (
	SELECT mc.campaign_name, ROUND(SUM(sc.price * t.quantity),2) AS total_revenue
    FROM marketing_campaigns mc
    JOIN sustainable_clothing sc USING(product_id)
    JOIN transactions t USING (product_id)
    WHERE t.purchase_date BETWEEN mc.start_date AND mc.end_date
    GROUP BY mc.campaign_name, sc.product_id
)
SELECT * FROM Revenue_by_each_campaign;

-- 4. What is the top-selling product category based on the total revenue generated?
SELECT sc.category AS top_selling_category, 
	ROUND(SUM(sc.price * t.quantity)) AS total_revenue
FROM sustainable_clothing sc
JOIN transactions t USING (product_id)
GROUP BY sc.category
ORDER BY total_revenue DESC
LIMIT 1;

-- 5. Which products had a higher quantity sold compared to the average quantity sold?
SELECT t.product_id, sc.product_name, SUM(t.quantity) AS total_sold_quantity
FROM transactions t
JOIN sustainable_clothing sc USING(product_id)
GROUP BY t.product_id
HAVING total_sold_quantity > AVG(t.quantity);

-- 6. What is the average revenue generated per day during the marketing campaigns?
SELECT mc.campaign_name,
	ROUND(SUM(t.quantity * sc.price) / (DATEDIFF(mc.end_date, mc.start_date)+1),2) 
    AS avg_revenue_per_day
FROM marketing_campaigns mc
JOIN sustainable_clothing sc USING(product_id)
JOIN transactions t USING(product_id)
WHERE t.purchase_date BETWEEN mc.start_date AND mc.end_date
GROUP BY mc.campaign_id ;

-- 7. What is the percentage contribution of each product to the total revenue?
WITH percent_contribution AS(
	SELECT sc.product_id, sc.product_name, 
		ROUND(SUM(t.quantity * sc.price),2) AS Revenue_per_product,
		SUM(ROUND((SUM(t.quantity * sc.price)),1)) OVER() AS total_revenue
	FROM transactions t
	JOIN sustainable_clothing sc USING(product_id)
	GROUP BY sc.product_id
)
SELECT product_name, Revenue_per_product, total_revenue, 
	ROUND(Revenue_per_product/total_revenue * 100, 2) AS Percent_contributon
FROM percent_contribution;

-- 8. Compare the average quantity sold during marketing campaigns to outside the marketing campaigns
SELECT 
	CASE
		WHEN mc.campaign_id IS NOT NULL THEN 'inside_campaigns'
		ELSE 'outside_campaigns' 
	END AS transaction_type,
	ROUND(AVG(t.quantity),2) AS total_Avg_quantity
FROM transactions t
LEFT JOIN marketing_campaigns mc USING(product_id)
JOIN sustainable_clothing sc USING(product_id)
GROUP BY  transaction_type;

-- 9. Compare the revenue generated by products inside the marketing campaigns to outside the campaigns
SELECT 
	CASE
		WHEN mc.campaign_id IS NOT NULL THEN 'inside_campaigns'
		ELSE 'outside_campaigns' 
	END AS transaction_type,
	ROUND(sum(t.quantity * sc.price),2) AS total_revenue
FROM transactions t
LEFT JOIN marketing_campaigns mc USING(product_id)
JOIN sustainable_clothing sc USING(product_id)
GROUP BY  transaction_type;

-- 10. Rank the products by their average daily quantity sold
SELECT product_name, ROUND(AVG(quantity),2) AS Avg_quantity_sold ,
	DENSE_RANK() OVER( ORDER BY AVG(quantity) DESC ) rn
FROM transactions t
JOIN sustainable_clothing sc USING(product_id)
GROUP BY product_name;

